---
# GitLab CI Configuration for CNGFW VNet Peering Report

# Global variables to reduce repetition
variables:
  # Azure and Authentication Variables
  ARM_TENANT_ID: "9d1d17d8-372b-4b23"
  
  # Paths for Reports and Logs
  COMPREHENSIVE_R_ATTACHMENT_PATH: "pipelines/__py/vnet_peering_report.html"
  FAILURE_R_ATTACHMENT_PATH: "pipelines/__py/vnet_peering_report.html"
  LOG_ATTACHMENT_PATH: "pipelines/__py/vnet_peering.log"
  
  # Email Configuration
  FROM_EMAIL: "gitlab-notif@svc.ptt.com"
  TO_EMAIL: "bakodjinlossi@ptt.com"
  FAILURE_TO_EMAIL: "failure-alerts@ptt.com"

# Define stages explicitly
stages:
  - deploy
  - notify

# Job to run VNet Peering Check
test-cngfw-peering-ops:
  image:
    name: docker.ptt.dev/dockerhub/python:latest
    entrypoint: ['']

  stage: deploy
  
  # Securely pass sensitive information
  variables:
    SVC_SECURITY_TERRA_ID: $SVC_SECURITY_TERRA_ID
    SVC_SECURITY_TERRA_SEC: $SVC_SECURITY_TERRA_SEC
    SENDGRID_API_KEY: $SENDGRID_API_KEY

  # Install necessary system dependencies
  before_script:
    - apt-get update && apt-get install -y curl jq

  # Main job script
  script:
    - |
      # Change to project directory
      cd pipelines/__py

      # Setup Python virtual environment
      python3 -m venv .venvsec 
      source .venvsec/bin/activate 
      
      # Upgrade pip and install dependencies
      python -m pip install --upgrade pip
      python -m pip install -r requirements.txt

      # Run VNet peering check script
      python main.py \
        --hub-subscription-ids 0a1d3787-531c-4354-98cc-c06d32af70,5d7d2ebb-f250-48c2-9553-1776839a73 \
        --auth-method service_principal \
        --tenant-id "$ARM_TENANT_ID" \
        --client-id "$SVC_SECURITY_TERRA_ID" \
        --client-secret "$SVC_SECURITY_TERRA_SEC" \
        --skip-cleanup

  # Preserve artifacts for debugging and reporting
  artifacts:
    paths:
      - pipelines/__py/
    expire_in: 1 week

  # Notification and cleanup script
  after_script:
    - |
      # Ensure script continues even if some steps fail
      set -e

      # Function to escape JSON strings using jq
      escape_json() {
        printf '%s' "$1" | jq -R -s '.'
      }

      # Capture job details
      JOB_URL="${CI_JOB_URL}"
      JOB_REF="${CI_COMMIT_REF_NAME}"
      JOB_COMMIT="${CI_COMMIT_SHORT_SHA}"

      # Prepare base email body
      BASE_EMAIL_BODY="Please find attached the detailed CNGFW - Azure VNets Peerings Report.

Job Details:
- Job URL: ${JOB_URL}
- Commit: ${JOB_COMMIT}
- Branch: ${JOB_REF}"

      # Escape the base email body
      EMAIL_BODY_ESCAPED=$(escape_json "$BASE_EMAIL_BODY")

      # Function to create attachments JSON
      create_attachments_json() {
        local attachments_json="["
        local first_attachment=true

        # Check and add comprehensive report
        if [ -f "$COMPREHENSIVE_R_ATTACHMENT_PATH" ]; then
          local comp_content=$(base64 -w 0 "$COMPREHENSIVE_R_ATTACHMENT_PATH")
          attachments_json+="{
            \"content\": \"$comp_content\",
            \"type\": \"text/html\",
            \"filename\": \"vnet_peering_report.html\",
            \"disposition\": \"attachment\"
          }"
          first_attachment=false
        fi

        # Check and add log file
        if [ -f "$LOG_ATTACHMENT_PATH" ]; then
          local log_content=$(base64 -w 0 "$LOG_ATTACHMENT_PATH")
          if [ "$first_attachment" = false ]; then
            attachments_json+=","
          fi
          attachments_json+="{
            \"content\": \"$log_content\",
            \"type\": \"text/plain\",
            \"filename\": \"vnet_peering.log\",
            \"disposition\": \"attachment\"
          }"
        fi

        attachments_json+="]"
        echo "$attachments_json"
      }

      # Function to send email via SendGrid
      send_sendgrid_email() {
        local to_email="$1"
        local subject="$2"
        local body="$3"
        local attachments="${4:-null}"

        # Construct payload using jq for safe JSON generation
        payload=$(jq -n \
          --arg to "$to_email" \
          --arg subject "$subject" \
          --arg body "$body" \
          --argjson attachments "$attachments" \
          '{
            "personalizations": [{
              "to": [{"email": $to}],
              "subject": $subject
            }],
            "from": {"email": "'"$FROM_EMAIL"'"},
            "content": [{
              "type": "text/plain",
              "value": $body
            }],
            "attachments": $attachments
          }')

        # Send email with comprehensive error handling
        response=$(curl -sS -X POST "https://api.sendgrid.com/v3/mail/send" \
          -H "Authorization: Bearer $SENDGRID_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$payload" \
          -w "%{http_code}" \
          2>&1)

        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n -1)

        if [ "$http_code" != "202" ]; then
          echo "Email sending failed. HTTP Code: $http_code" >&2
          echo "Response: $body" >&2
          return 1
        fi
      }

      # Prepare attachments JSON
      ATTACHMENTS_JSON=$(create_attachments_json)

      # Send main report email
      send_sendgrid_email \
        "$TO_EMAIL" \
        "CNGFW - Azure VNets Peering Report" \
        "$EMAIL_BODY_ESCAPED" \
        "$ATTACHMENTS_JSON"

      # Check for failure report
      if [ -f "$FAILURE_R_ATTACHMENT_PATH" ]; then
        # Read failure content
        FAILURE_CONTENT=$(cat "$FAILURE_R_ATTACHMENT_PATH")

        # Prepare failure email body
        FAILURE_EMAIL_BODY="CNGFW - Azure VNets Peering Failure Detected

Job Details:
- Job URL: ${JOB_URL}
- Commit: ${JOB_COMMIT}
- Branch: ${JOB_REF}

Failure Details:
${FAILURE_CONTENT}"

        # Escape failure email body
        FAILURE_EMAIL_BODY_ESCAPED=$(escape_json "$FAILURE_EMAIL_BODY")

        # Send failure notification email
        send_sendgrid_email \
          "$FAILURE_TO_EMAIL" \
          "CNGFW - Azure VNets Peering FAILURE Report" \
          "$FAILURE_EMAIL_BODY_ESCAPED"
      fi

      # Clean up virtual environment
      rm -rf pipelines/__py/.venvsec

  # Job execution rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - when: manual
      allow_failure: true