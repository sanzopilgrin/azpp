stages:
  - deploy

variables:
  # Global variables
  PYTHON_VERSION: "3.11"
  VENV_PATH: "pipelines/__py/.venvsec"
  REPORTS_DIR: "pipelines/__py"
  
  # Email configuration
  FROM_EMAIL: "gitlab-notif@svc.ptt.com"
  TO_EMAIL: "bakodjinlossi@ptt.com"
  FAILURE_TO_EMAIL: "failure-alerts@ptt.com"
  
  # Report file paths
  COMPREHENSIVE_REPORT_PATH: "pipelines/__py/vnet_peering_report.html"
  FAILURE_REPORT_PATH: "pipelines/__py/vnet_peering_failure_report.html"
  LOG_FILE_PATH: "pipelines/__py/vnet_peering.log"
  
  # Azure configuration
  ARM_TENANT_ID: "9d1d17d8-372b-4b23"
  HUB_SUBSCRIPTION_IDS: "0a1d3787-531c-4354-98cc-c06d32af70,5d7d2ebb-f250-48c2-9553-1776839a73"

test-cngfw-peering-ops:
  image: docker.ptt.dev/dockerhub/python:${PYTHON_VERSION}
  stage: deploy
  
  variables:
    # Service principal credentials (from CI/CD variables)
    SVC_SECURITY_TERRA_ID: $SVC_SECURITY_TERRA_ID
    SVC_SECURITY_TERRA_SEC: $SVC_SECURITY_TERRA_SEC
    SENDGRID_API_KEY: $SENDGRID_API_KEY

  environment:
    name: SECENG_ENV

  before_script:
    - echo "üöÄ Starting CNGFW Azure VNet Peering Operations..."
    - cd pipelines/__py
    - echo "üì¶ Setting up Python virtual environment..."
    - python3 -m venv ${VENV_PATH}
    - source ${VENV_PATH}/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - echo "‚úÖ Environment setup completed"

  script:
    - echo "üîç Executing VNet peering analysis..."
    - |
      python main.py \
        --hub-subscription-ids ${HUB_SUBSCRIPTION_IDS} \
        --auth-method service_principal \
        --tenant-id "${ARM_TENANT_ID}" \
        --client-id ${SVC_SECURITY_TERRA_ID} \
        --client-secret ${SVC_SECURITY_TERRA_SEC} \
        --skip-cleanup \
        --output-format html \
        --log-level INFO
    - echo "‚úÖ VNet peering analysis completed"

  artifacts:
    name: "cngfw-peering-reports-${CI_PIPELINE_ID}"
    paths:
      - pipelines/__py/*.html
      - pipelines/__py/*.log
      - pipelines/__py/*.json
    expire_in: 30 days
    when: always

  after_script:
    - echo "üìß Preparing email notifications..."
    - cd pipelines/__py
    # Make email script executable and execute it
    - chmod +x ../../scripts/send_email_notifications.sh
    - ../../scripts/send_email_notifications.sh
    # Cleanup
    - echo "üßπ Cleaning up temporary files..."
    - rm -rf ${VENV_PATH}
    - echo "‚úÖ Pipeline execution completed"

  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

  timeout: 30m

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: false